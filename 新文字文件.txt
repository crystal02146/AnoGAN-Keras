import sys
from PyQt5.QtWidgets import QApplication, QWidget, QScrollArea , QLabel, QPushButton, QHBoxLayout , QVBoxLayout , QSizePolicy , QMessageBox , QMenuBar , QAction
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
import random
import time
import os

class MyWidget(QWidget):
    def __init__(self):
        super().__init__()
        
        self.englishs = []
        self.chineses = []

        self.load_data()
        
        self.max_length = len(max(self.englishs, key=len))
        
        self.count = 0
        self.count_list = list(range(len(self.englishs)))
        self.count_list = random.sample(self.count_list, len(self.count_list))

        

        self.vertical_layout = QVBoxLayout()
        self.vertical_layout2 = QVBoxLayout()
        self.setWindowTitle('PyQt Horizontal Layout Example')

        self.label_hint_letter = []
        self.label_answer_letter = []

        
        self.create_layout()
    
    def load_data(self):
        
        path = './voc'

        filenames = os.listdir(path)
        for filename in filenames:
        
            with open(os.path.join(path , filename) , 'r', encoding='utf-8') as file:
                english = file.readline().strip()
                chinese = file.readline().strip()
                
                self.englishs.append(english)
                self.chineses.append(chinese)
                
    
    def load_menu_bar(self):
        
        menu_bar = QMenuBar(self)
        file_menu = menu_bar.addMenu('Load')
        file_menu2 = menu_bar.addMenu('Setting')
        # 在菜单中添加一个动作
        action1 = QAction('Open', self)
        file_menu.addAction(action1)

        # 在菜单中添加一个分隔符
        file_menu.addSeparator()
        
        
        return menu_bar
    
    def load_tool_bar(self):
        
        layout_toolbar = QHBoxLayout()
        button_listen = QPushButton('Listen')
        button_hint = QPushButton('Hint')
        button_hint.clicked.connect(self.on_button_click)
        
        timer = "time：00:00:00"
        label_timer = QLabel(timer)
        #label_timer.setFont(font)
        #label.setAlignment(Qt.AlignRight)
        label_blank = QLabel("")

        
        layout_toolbar.addWidget(button_listen , 1)
        layout_toolbar.addWidget(button_hint , 1)
        layout_toolbar.addWidget(label_blank , 1)
        layout_toolbar.addWidget(label_timer , 1)
        
        return layout_toolbar
    
    def on_button_click(self):
        
        is_reveal = False
        for i in range(len(self.label_hint_letter)):
            letter = self.label_hint_letter[i]
            if letter.text() == "_":
                letter.setText(self.english[i])
                is_reveal = True
        
        if is_reveal == False:
            for i in range(len(self.label_hint_letter)):
                letter = self.label_hint_letter[i]
                if letter.text() != " ":
                    letter.setText("_")
                    
            self.label_hint_letter[0].setText(self.english[0])
            self.label_hint_letter[len(self.english)-1].setText(self.english[-1])
            
    def create_layout(self):
    
        self.english = self.englishs[self.count_list[self.count]]
        self.english_hint = "_" * len(self.english)
        
        english_hint = list(self.english_hint)
        english_hint[0] = self.english[0]
        english_hint[-1] = self.english[-1]
        self.english_hint = ''.join(english_hint)
        
        chinese = self.chineses[self.count_list[self.count]]
        
        self.user_answer = ""
        self.blank = " " * (self.max_length - len(self.english))
        self.label_answer_letter.clear()
        self.label_hint_letter.clear()
         
        #Layout 設定
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)  # 使滚动区域的大小可调整
        scroll_area.setFrameShape(QScrollArea.NoFrame)

        font = QFont()
        font.setPointSize(20)
        font.setFamily("微軟正黑體")
        #font.setLetterSpacing(QFont.AbsoluteSpacing, 0)
        
        
        menu_bar = self.load_menu_bar()
        layout_toolbar = self.load_tool_bar()


        #題目
        layout_chinese = QHBoxLayout()
        label = QLabel(str(self.count+1)+". "+chinese)
        label.setFont(font)
        layout_chinese.addWidget(label)
        
        #答案
        layout_answer = QHBoxLayout()
        for i in range(len(self.english)+len(self.blank)):
            
            layout_letter = QVBoxLayout()
            
            if i < len(self.english_hint):
                char = self.english_hint[i]
            else:
                char = " "
            label = QLabel(char)
            label.setFont(font)
            label.setAlignment(Qt.AlignCenter)
            self.label_hint_letter.append(label)
            layout_letter.addWidget(label)
            
            if i < len(self.english):
                char = "_"
            else:
                char = " "
            label = QLabel(char)
            label.setFont(font)
            label.setAlignment(Qt.AlignCenter)
            self.label_answer_letter.append(label)
            layout_letter.addWidget(label)
            
            
            layout_answer.addLayout(layout_letter)
            #layout_answer.setSpacing(0)
            
        self.vertical_layout.setMenuBar(menu_bar)
        self.vertical_layout.addLayout(layout_toolbar)
        self.vertical_layout.addLayout(layout_chinese)
        
        scroll_content = QWidget()
        scroll_content.setLayout(layout_answer)
        scroll_area.setWidget(scroll_content)
        scroll_area.setFixedSize(500, 100)
        
        self.vertical_layout.addWidget(scroll_area)
        
        self.setLayout(self.vertical_layout)

        
    
    def delete_layout(self):
       
        while self.vertical_layout.count():
            print("Layout = %s"%self.vertical_layout.count())
            item = self.vertical_layout.takeAt(0)
            layout = item.layout()
            if layout:
                while layout.count():
                    print("Layout_child = %s"%layout.count())
                    item = layout.takeAt(0)
                    widget = item.widget()
                    if widget:
                        widget.deleteLater()
                layout.deleteLater()
               

            
    def skip_next_question(self):

        if self.count < len(self.englishs)-1:
            self.count += 1
        else:
            self.show_info_message()
            self.count = 0 

        self.delete_layout()
        self.create_layout()

        
    def user_answer_check(self):
    
        for i in range(len(self.label_answer_letter)):
            if i < len(self.user_answer):
                char = self.user_answer[i]
                if i < len(self.english):
                    if char == self.english[i] or char.upper() == self.english[i] or char.lower() == self.english[i]:
                        char = "<font color='green'>%s</font>"%self.english[i]
                    else:
                        char = "<font color='red'>%s</font>"%char
                else:
                    char = "<font color='red'>%s</font>"%char
                self.label_answer_letter[i].setText(char)
            else:
                if i < len(self.english):
                    self.label_answer_letter[i].setText("_")
                else:
                    self.label_answer_letter[i].setText(" ")
                    
            self.label_answer_letter[i].setAlignment(Qt.AlignCenter)
        
        
    
    def keyPressEvent(self, event):
        key = event.key()
        
        if event.modifiers() & Qt.ControlModifier:
            self.skip_next_question()
        
        elif key == Qt.Key_Enter or key == Qt.Key_Return:
            if self.user_answer.lower() == self.english.lower():
                self.skip_next_question()

        elif key == Qt.Key_Space:
            self.user_answer += " "
            self.user_answer_check()
        elif key == Qt.Key_Backspace:
            self.user_answer = self.user_answer[:-1]
            self.user_answer_check()
        elif Qt.Key_A <= key <= Qt.Key_Z:
            self.user_answer += event.text()
            self.user_answer_check()
        else:
            event.ignore()
        
    def show_info_message(self):
        #QMessageBox.information(self, '訊息', '你已經做完所有考題', QMessageBox.Ok)
        pass
    
    
if __name__ == '__main__':
    app = QApplication(sys.argv)
    widget = MyWidget()
    widget.show()
    sys.exit(app.exec_())
